{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","show","setShow","duplicate","setDuplicate","solvedBoard","setSolvedBoard","board","useEffect","console","log","handleChange","i","j","e","target","value","parseInt","checkBoard","valid","position","num","row","rowValid","column","columnValid","squareRow","Math","floor","squareColumn","squareValid","duplicates","duplicateCounter","duplicatePosition","rowDuplicates","columnDuplicates","squareDuplicates","solve","l","findEmpty","className","map","key","element","type","defaultValue","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b2cde04.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { ok } from 'assert';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [duplicate, setDuplicate] = useState([-1,-1]);\r\n    const [solvedBoard, setSolvedBoard] = useState([[3, 0, 6, 5, 0, 8, 4, 0, 0],\r\n        [5, 2, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 8, 7, 0, 0, 0, 0, 3, 1],\r\n        [0, 0, 3, 0, 1, 0, 0, 8, 0],\r\n        [9, 0, 0, 8, 6, 3, 0, 0, 5],\r\n        [0, 5, 0, 0, 9, 0, 6, 0, 0],\r\n        [1, 3, 0, 0, 0, 0, 2, 5, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 7, 4],\r\n        [0, 0, 5, 2, 0, 6, 3, 0, 0]]);\r\n    \r\n        const [board, setBoard] = useState([[3, 0, 6, 5, 0, 8, 4, 0, 0],\r\n        [5, 2, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 8, 7, 0, 0, 0, 0, 3, 1],\r\n        [0, 0, 3, 0, 1, 0, 0, 8, 0],\r\n        [9, 0, 0, 8, 6, 3, 0, 0, 5],\r\n        [0, 5, 0, 0, 9, 0, 6, 0, 0],\r\n        [1, 3, 0, 0, 0, 0, 2, 5, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 7, 4],\r\n        [0, 0, 5, 2, 0, 6, 3, 0, 0]]);\r\n    \r\n    useEffect(() => {\r\n        console.log(\"updated\")\r\n    }, [duplicate])\r\n\r\n    const handleChange = (i: number, j: number, e: any) => {\r\n        if (e.target.value) {\r\n            board[i][j] = parseInt(e.target.value)\r\n            checkBoard();\r\n            setSolvedBoard(board);\r\n        }\r\n        else if (e.target.value < 0 || e.target.value > 9){\r\n            board[i][j] = 0\r\n            setSolvedBoard(board);\r\n        }\r\n        else {\r\n            console.log(\"wrong\")\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setShow(true);\r\n        solve();\r\n    }\r\n    \r\n    const handleClear = () => {\r\n        setShow(false);\r\n    }\r\n\r\n    const columnValid = (column: number, num: number) => {\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            if (solvedBoard[i][column] === num && solvedBoard[i][column] !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const columnDuplicates = (column: number, num: number) => {\r\n        let duplicateCounter: number = 0;\r\n        let duplicatePosition: number[] = [-1, -1];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (solvedBoard[i][column] === num && solvedBoard[i][column] !== 0) {\r\n                duplicateCounter ++;\r\n                duplicatePosition = [i, column]\r\n            }\r\n        }\r\n        if (duplicateCounter > 1) {\r\n            setDuplicate(duplicatePosition);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    const rowDuplicates = (row: number, num: number) => {\r\n        let duplicateCounter: number = 0;\r\n        let duplicatePosition: number[] = [-1, -1];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (solvedBoard[row][i] === num && solvedBoard[row][i] !== 0) {\r\n                duplicateCounter ++;\r\n                duplicatePosition = [row, i]\r\n            }\r\n        }\r\n        if (duplicateCounter > 1) {\r\n            setDuplicate(duplicatePosition);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    const squareDuplicates = (position: number[], num: number) => {\r\n        let duplicateCounter: number = 0;\r\n        let duplicatePosition: number[] = [-1, -1];\r\n        \r\n        let squareRow: number = Math.floor(position[0] / 3);\r\n        let squareColumn: number = Math.floor(position[1] / 3);\r\n        \r\n        for (let i = squareRow * 3; i < squareRow * 3 + 3; i++) {\r\n            for (let j = squareColumn * 3; j < squareColumn * 3 + 3; j++) {\r\n                if (solvedBoard[i][j] === num && solvedBoard[i][j] !== 0) {\r\n                    duplicateCounter++;\r\n                    duplicatePosition = [i, j];\r\n                }\r\n            }\r\n        }\r\n        if (duplicateCounter > 1) {\r\n            setDuplicate(duplicatePosition);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const rowValid = (row: number, num: number) => {\r\n        for (let i = 0; i < 9; i++) {\r\n            if (solvedBoard[row][i] === num && solvedBoard[row][i] !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    const findEmpty = (l: number[]) => {\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                if (solvedBoard[i][j] === 0) {\r\n                    l[0] = i;\r\n                    l[1] = j;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    const squareValid = (position: number[], num: number) => {\r\n        let squareRow: number = Math.floor(position[0] / 3);\r\n        let squareColumn: number = Math.floor(position[1] / 3);\r\n\r\n        for (let i = squareRow * 3; i < squareRow * 3 + 3; i++) {\r\n            for (let j = squareColumn * 3; j < squareColumn * 3 + 3; j++) {\r\n                if (solvedBoard[i][j] === num && solvedBoard[i][j] !== 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const valid = (position: number[], num: number) => {\r\n        if (rowValid(position[0], num) && columnValid(position[1], num) && squareValid(position, num)) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    const checkBoard = () => {\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                if (duplicates([i, j], solvedBoard[i][j])){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const duplicates = (position: number[], num: number) => {\r\n        if (rowDuplicates(position[0], num) || columnDuplicates(position[1], num) || squareDuplicates(position, num)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const solve = () => {\r\n        var l: number[] = [0, 0];\r\n        if (!findEmpty(l)) {\r\n            return true;\r\n        }\r\n        var row: number = l[0];\r\n        var column: number = l[1];\r\n        var position: number[] = [row, column];\r\n        for (let i = 1; i < 10; i++) {\r\n            if (valid(position, i)) {\r\n                solvedBoard[row][column] = i;\r\n                if (solve()) {\r\n                    return true;\r\n                }\r\n                solvedBoard[row][column] = 0;\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <div className=\"not-solved-box\">\r\n                    {board.map((row, i: number) => {\r\n                        return (<div key={i}>\r\n                            {row.map((element, j: number) => {\r\n                                if (i === duplicate[0] && j === duplicate[1]) {\r\n                                    return (\r\n                                        <input className=\"wrong-square\" type=\"number\" defaultValue={element} key={j} onChange={(e: any) => handleChange(i, j, e)} />\r\n                                    )\r\n                                }\r\n                                else{\r\n                                    return (\r\n                                        <input className=\"square\" type=\"number\" defaultValue={element} key={j} onChange={(e: any) => handleChange(i, j, e)} />\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </div>)\r\n                    })}\r\n                    <div className=\"not-solved\">\r\n                        <button className=\"button\" onClick={handleClick}>Solve!</button>\r\n                        <button className=\"button\" onClick={handleClear}>Clear</button>\r\n                    </div>\r\n                    <div className=\"solved-box\">\r\n                        {show ? (\r\n                            <div>\r\n                                {solvedBoard.map((row, i: number) => {\r\n                                    return (<div key={i}>\r\n                                        {row.map((element, j: number) => {\r\n                                            return (\r\n                                                <div key={i} className=\"square row\">\r\n                                                    <p>\r\n                                                        <text className=\"solved\" key={j} >{element}</text>\r\n                                                    </p>\r\n                                                </div>\r\n                                            )\r\n                                        })}\r\n                                    </div>)\r\n                                })}\r\n                            </div>\r\n\r\n                        ) : (null)}\r\n                    </div>\r\n\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}